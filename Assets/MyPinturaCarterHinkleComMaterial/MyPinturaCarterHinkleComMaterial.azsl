#pragma once

#include <viewsrg_all.srgi>
#include <scenesrg_all.srgi>
#include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#include <Atom/Features/SrgSemantics.azsli>

ShaderResourceGroup MyPinturaCarterHinkleComMaterialSrg : SRG_PerMaterial
{
    float3 m_colorA;
    float3 m_colorB;
    float3 m_colorC;
    float3 m_colorD;
}

struct VSInput
{
    float3 m_position : POSITION;
    float2 m_uv : UV0;
};

struct VSOutput
{
    float4 m_position : SV_Position;
    float2 m_uv : UV0;
};

struct PSOutput
{
    float4 m_diffuseColor : SV_Target0;
    float4 m_specularColor : SV_Target1;
};

VSOutput MainVS(VSInput vsInput)
{
    VSOutput vsOutput;

    float3 worldPosition = mul(ObjectSrg::GetWorldMatrix(), float4(vsInput.m_position, 1.0)).xyz;
    vsOutput.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(worldPosition, 1.0));

    vsOutput.m_uv = vsInput.m_uv;

    return vsOutput;
}

PSOutput MainPS(VSOutput vsOutput)
{
    PSOutput psOutput;

    float x = vsOutput.m_uv.x * 100.0;
    float y = vsOutput.m_uv.y * 100.0;

    float time = SceneSrg::m_time;

    float3 colors[] = {
        MyPinturaCarterHinkleComMaterialSrg::m_colorA,
        MyPinturaCarterHinkleComMaterialSrg::m_colorB,
        MyPinturaCarterHinkleComMaterialSrg::m_colorC,
        MyPinturaCarterHinkleComMaterialSrg::m_colorD 
    };

    // Sinusoidal waves based on pixel position and time
    float horizontalWave = sin(x * 0.2 + time);
    float verticalWave = cos(y * 0.3 - time * 1.2);

    // Radial ripple based on distance from origin
    float radialRipple = sin((x * x + y * y) * .0003 - time * 2.0);

    // Combine waves
    float combinedWave = horizontalWave + verticalWave + radialRipple;

    // Use combinedWave to pick a color index between 0 and 3
    int paletteIndex = int(floor((combinedWave + 4.0) * 0.5) % 4.0);

    // Select color from palette
    float3 color = colors[paletteIndex];

    psOutput.m_diffuseColor = float4(color, -1.0);
    psOutput.m_specularColor = float4(0.0, 0.0, 0.0, 0.0);

    return psOutput;
}
